// bringing in our class modules
const Manager = require("./classes/manager");
const Engineer = require("./classes/engineer");
const Intern = require("./classes/intern");
// bringing in our dependencies
const inquirer = require("inquirer");
const path = require("path");
const fs = require("fs");
// setting the path to put our generated html file
const OUTPUT_DIR = path.resolve(__dirname, "output");
const outputPath = path.join(OUTPUT_DIR, "team.html");

const render = require("./htmlRenderer");
// empty array that will fill up with new employee objects
const teamEmployees = [];
// prompt question that triggers a set of more prompt questions based on which type of member you are adding
const memberSelect = () =>
    inquirer.prompt([{
        type: "list",
        name: "memberSelect",
        message: "Is this team member a Manager, Intern, or an Engineer?",
        choices: ["Manager","Engineer", "Intern"]
    }]).then((responses) => {
        if(responses.memberSelect === "Manager"){
            managerInfo();
        }
        else if(responses.memberSelect === "Engineer"){
            engineerInfo();
        }
        else{
            internInfo();
        }
    });
// the add another team member question
const addTeamMember = () =>
inquirer.prompt([{
    type: "confirm",
    name: "addMember",
    message: "Do you want to add another team member?",
    default: "false"
}
// if response was yes trigger another prompt question
]).then((responses) => {
    if (responses.addMember) {
        memberSelect();
    }
// if response was no then write the html file generated by pushing the teamEmployees array into the render function
// and put the html file in the output folder
    else{
        fs.writeFile(outputPath,render(teamEmployees),(error) => {if(error) throw error});
        console.log("Page has been created and is located in the output folder!");
    }
});
// prompt questions for adding a new manager
const managerInfo = () =>
    inquirer.prompt([
        {
            type: "input",
            name: "managerName",
            message: "What is the name of this teams manager?"
        },
        {
            type: "input",
            name: "managerId",
            message: "What is the manager's ID number?",
        },
        {
            type: "input",
            name: "managerEmail",
            message: "What is the manager's email address?",
        },
        {
            type: "input",
            name: "managerOfficeNumber",
            message: "What is the manager's office number?",
        }
// pushing a new manager object with the data we just collected from the questions into the teamEmployees array
    ]).then((responses) => {
        const newManager = new Manager(responses.managerName,parseInt(responses.managerId),responses.managerEmail,parseInt(responses.managerOfficeNumber));
        teamEmployees.push(newManager);
        addTeamMember();
    });
// prompt questions for adding a new engineer
const engineerInfo = () =>
    inquirer.prompt([
        {
            type: "input",
            name: "engineerName",
            message: "What is the name of this engineer?"
        },
        {
            type: "input",
            name: "engineerId",
            message: "What is this engineer's ID number?",
        },
        {
            type: "input",
            name: "engineerEmail",
            message: "What is this engineer's email address?",
        },
        {
            type: "input",
            name: "engineerGithub",
            message: "What is this engineer's Github Username?",
        }
// pushing a new engineer object into our teamEmployees array with the data we collected from the questions
    ]).then((responses) => {
        const newEngineer = new Engineer(responses.engineerName,parseInt(responses.engineerId),responses.engineerEmail,responses.engineerGithub);
        teamEmployees.push(newEngineer);
// triggering a prompt question if you want to add another team member        
        addTeamMember();
    });
// prompt questions for adding a new intern
const internInfo = () =>
    inquirer.prompt([
        {
            type: "input",
            name: "internName",
            message: "What is the name of this Intern?"
        },
        {
            type: "input",
            name: "internId",
            message: "What is this Intern's ID number?",
        },
        {
            type: "input",
            name: "internEmail",
            message: "What is this Intern's email address?",
        },
        {
            type: "input",
            name: "internSchool",
            message: "What school does this intern attend?",
        }
// pushing a new intern object into our teamEmployees array with the data we collected from the questions
    ]).then((responses) => {
        const newIntern = new Intern(responses.internName,parseInt(responses.internId),responses.internEmail,responses.internSchool);
        teamEmployees.push(newIntern);
// triggering a prompt question asking if you want to add another team member
        addTeamMember();
    });
// main function that first triggers the member select prompt questions 
const main = async () => {
    console.log("Time to make an A-Team!");
    try {
        memberSelect();
    }
    catch (error) {
        console.log(error);
    }
}
main();

